@page "/admin/roles"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using ParentCapitalBlazor.Data;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Администрирование Ролей</h3>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th><button type="button" class="btn btn-primary" @onclick="AddNewRole"><span class="oi oi-plus" aria-hidden="true"></span></button></th>
                        <th scope="col">Код</th>
                        <th scope="col">Наименование роли</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListRoles)
                    {
                        <tr>
                            <th>
                                <button type="button" class="btn btn-warning" @onclick="(() => EditRole(item))"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                                <button type="button" class="btn btn-danger" @onclick="(() => DeleteRole(item))"><span class="oi oi-trash" aria-hidden="true"></span></button>
                            </th>
                            <td scope="row">@item.Id</td>
                            <td>@item.Name</td>
                        </tr>
                    } 
                </tbody>
            </table>

            <Modal @ref="modalNew">
                <Title>Cоздать роль</Title>
                <Body>
                    <form>
                        <div class="form-group">
                            <label for="obj-role-name" class="col-form-label">Наименование роли:</label>
                            <input type="text" class="form-control" id="obj-role-name" @bind="objRole.Name">
                        </div>
                    </form>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-primary" @onclick="SaveNewRole">Сохранить</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modalNew" @onclick="() => modalNew.Close()">Закрыть</button>
                </Footer>
            </Modal>

            <Modal @ref="modalEdit">
                <Title>Редактировать роль</Title>
                <Body>
                    <form>
                        <div class="form-group">
                            <label for="obj-role-id" class="col-form-label">Код роли:</label>
                            <input type="text" class="form-control" id="obj-role-id" @bind="objRole.Id" readonly>
                        </div>
                        <div class="form-group">
                            <label for="obj-role-name" class="col-form-label">Наименование роли:</label>
                            <input type="text" class="form-control" id="obj-role-name" @bind="objRole.Name">
                        </div>
                    </form>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-primary" @onclick="SaveEditRole">Сохранить</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modalEdit" @onclick="() => modalEdit.Close()">Закрыть</button>
                </Footer>
            </Modal>
        }
        else
        {
            <p>Вы не входите в группу @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Войдите в систему</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    private Modal modalNew { get; set; }
    private Modal modalEdit { get; set; }

    string ADMINISTRATION_ROLE = "Администраторы";

    IdentityRole objRole = new IdentityRole();

    List<IdentityRole> ListRoles = new List<IdentityRole>();

    string strError = "";

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        GetRoles();
    }

    public void GetRoles()
    {
        ListRoles = new List<IdentityRole>();
        var roles = _RoleManager.Roles.ToList();

        foreach (var item in roles)
        {
            ListRoles.Add(item);
        }
    }

    void AddNewRole()
    {
        objRole = new IdentityRole();
        objRole.Id = "";
        modalNew.Open();
    }

    async Task SaveNewRole()
    {

        var NewRole = new IdentityRole{ Name = objRole.Name };
        var CreateResult = await _RoleManager.CreateAsync(NewRole);

        if (!CreateResult.Succeeded)
        {
            if (CreateResult.Errors.FirstOrDefault() != null)
            {
                strError = CreateResult.Errors.FirstOrDefault().Description;
            }
            else
            {
                strError = "Create error";
            }

            // Keep the popup opened
            return;
        }

        // Close the Popup
        modalNew.Close();

        // Refresh Users
        GetRoles();
    }

    void EditRole(IdentityRole _IdentityRole)
    {
        objRole = _IdentityRole;
        modalEdit.Open();
    }

    async Task SaveEditRole()
    {
        var role = await _RoleManager.FindByIdAsync(objRole.Id);
        role.Name = objRole.Name;
        await _RoleManager.UpdateAsync(role);

        modalEdit.Close();

        GetRoles();
    }

    async Task DeleteRole(IdentityRole _IdentityRole)
    {
        objRole = _IdentityRole;

        var role = await _RoleManager.FindByIdAsync(objRole.Id);
        if (role != null)
        {
            // Delete the user
            await _RoleManager.DeleteAsync(role);
        }

        GetRoles();
    }
}